class FOPCParser:
    def __init__(self, variables):
        self.variables = variables

    def parse_expression(self, expression):
        tokens = expression.split()
        stack = []

        for token in tokens:
            if token.isalpha():
                if token in self.variables:
                    stack.append(self.variables[token])
                else:
                    raise ValueError(f"Undefined variable: {token}")
            elif token.lower() == 'and':
                operand2 = stack.pop()
                operand1 = stack.pop()
                stack.append(operand1 and operand2)
            elif token.lower() == 'or':
                operand2 = stack.pop()
                operand1 = stack.pop()
                stack.append(operand1 or operand2)
            elif token.lower() == 'not':
                operand = stack.pop()
                stack.append(not operand)

        if len(stack) == 1:
            return stack[0]
        else:
            raise ValueError("Invalid expression")


variables = {'p': True, 'q': True, 'r': False}
expressions = ["p and q", "p or r", "not p", "q and (r or p)"]

parser = FOPCParser(variables)

for expression in expressions:
    result = parser.parse_expression(expression)
    print(f"{expression}: {result}")
